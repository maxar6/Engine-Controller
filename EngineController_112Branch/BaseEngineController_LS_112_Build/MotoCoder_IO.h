
/* MotoCoder_IO.h */
/* Generated by MotoCoder */
/* Version: 0.12.4 */
/* At: 2022-11-22 13:57:05 */
/* Copyright: 2022 Woodward. */


#ifndef MOTOCODER_IO_H
#define MOTOCODER_IO_H



#include <MotoCoder_Callbacks.h>
#include <MotoCoder_Types.h>
#include <MotoCoder_DataStore.h>
	
extern NativeError_S VISTA_1_Register_Write(NativeVar_U eReg, void const* pData, NativeVar_U uNumRegs);
extern NativeError_S VISTA_1_Register_Read(NativeVar_U eReg, void* out_pBuffer, NativeVar_U uNumRegs);extern void CNK_Encoder_SecondarySensingOffset_Set(int16_T sensingOffset_x16Deg);
extern void CNK_Encoder_SensingOffset_Set(int16_T sensingOffset_x16Deg);
extern uint16_T CNK_Encoder_InstantRPM_Get(void);
extern uint16_T CNK_Encoder_AverageRPM_Get(void);
extern void CNK_Encoder_PseudoRPM_Set(uint16_T rpm);
extern void CNK_Encoder_EncoderPhase_Change(NativeBool in_bChangePhase);
extern int16_T CNK_Encoder_DegreesInCycle_Get(void);
extern NativeBool CNK_Encoder_PulseScheduling_IsPossible(void);
extern NativeBool CNK_Encoder_IsEvent1FirstToOccur(int16_T sBfTDC1Event1, int16_T sBfTDC1Event2);
extern NativeVar_U CNK_Encoder_GetNextArrEventToOccur(int16_T const* psBfTDCEventArr, int16_T const* pAfTDCOffsetArr, NativeVar_U uNumEvents);
extern NativeBool CNK_Encoder_IsAngleBetween(int32_T sAngle1, int32_T sAngle2, int32_T sAngleToTestForInBetween);
extern NativeVar_U CNK_Encoder_GetNextEventToOccur(int16_T sBfTDCEvent, int16_T const* pAfTDCOffsetArr, NativeVar_U uNumEvents);
extern int16_T CNK_Encoder_NumDegreesPerCycle_Get(void);
extern int16_T CNK_Encoder_NearnessProtectedStopAngle_Get(int16_T startAnglePulse, int16_T stopAnglePreviousPulse, int16_T sMinDisplacementForPulseScheduling);
extern int16_T CNK_Encoder_Angle_Get(void);
extern uint8_T CNK_Encoder_EncoderState_Get(void);
extern uint8_T CNK_Encoder_EncoderError_Get(void);extern boolean_T ESTOPPin_DigitalInput_Get(void);extern void DOut10176p0004_DiscreteOutput_Set(boolean_T value);extern uint32_T RS485_SerialLink_MaxAllowedBaud_Get(void);
extern NativeError_S RS485_SerialLink_BaudRate_Change(uint32_T u32BaudRate);
extern uint32_T RS485_SerialLink_BaudRate_Get(void);
extern NativeError_S RS485_SerialLink_ReadSync(void* in_pBuffer, NativeVar_U in_uCharactersToRead, int32_T in_sTimeOutInMillisecs);
extern NativeError_S RS485_SerialLink_Transmit_WithCallbackOnComplete(void* in_pBuffer, NativeVar_U in_uNumCharacters, void (*in_pfnCback)(NativePtrSizedInt_U), NativePtrSizedInt_U uUserData);
extern NativeError_S RS485_SerialLink_Transmit(void* in_pBuffer, NativeVar_U in_uNumCharacters);
extern NativeError_S RS485_SerialLink_TxQueue_Purge(void);
extern NativeError_S RS485_SerialLink_RxQueue_Purge(void);
extern NativeVar_U RS485_SerialLink_RxQueueDepth_Get(void);
extern NativeVar_U RS485_SerialLink_TxQueueDepth_Get(void);
extern NativeVar_U RS485_SerialLink_ModuleId_Get(void);
#define RS485_MODULE_NUMBER_SCI_A 0
#define RS485_MODULE_NUMBER_SCI_B 1
#define RS485_MODULE_NUMBER_SCI_C 2
#define RS485_MODULE_NUMBER_SCI_D 3
#define RS485_MODULE_NUMBER_SCI_0 0
#define RS485_MODULE_NUMBER_SCI_1 1
#define RS485_MODULE_NUMBER_SCI_2 2
#define RS485_MODULE_NUMBER_SCI_3 3
extern uint16_T AN2_AnalogInput_Get(void);
extern uint16_T AN3_AnalogInput_Get(void);
extern uint16_T AN4_AnalogInput_Get(void);
extern uint16_T AN5_AnalogInput_Get(void);
extern uint16_T AN6_AnalogInput_Get(void);
extern uint16_T AN15_AnalogInput_Get(void);
extern uint16_T AN7_AnalogInput_Get(void);
extern uint16_T AN8_AnalogInput_Get(void);
extern uint16_T AN9_AnalogInput_Get(void);
extern uint16_T AN10_AnalogInput_Get(void);
extern uint16_T AN11_AnalogInput_Get(void);
extern uint16_T AN14_AnalogInput_Get(void);
extern uint16_T ECUP_AnalogInput_Get(void);
extern uint16_T H1_Imon_AnalogInput_Get(void);extern uint16_T MAPSensorPin_AnalogInput_Get(void);extern uint16_T DRVP_AnalogInput_Get(void);extern uint16_T XDRP_AnalogInput_Get(void);extern uint16_T AN12_AnalogInput_Get(void);extern uint16_T AN13_AnalogInput_Get(void);extern void SPD1_FrequencyInput_TriggerOnPulseCnt_Set(uint8_T uDesiredPulseCnt);
extern uint32_T SPD1_FrequencyInput_AverageFrequency_Get(void);
extern uint32_T SPD1_FrequencyInput_InstantFrequency_Get(void);
extern void SPD1_FrequencyInput_InstantFrequencyWithDutyCycle_Get(uint32_T* const out_pu32Frequency, int16_T* const out_ps16Duty);
extern void SPD1_FrequencyInput_Period_Raw_Get32Bit(uint32_T* const out_pu32PeriodCnts, uint32_T* const out_pu32DutyCycleCnts);
extern void SPD1_FrequencyInput_Period_Raw_Get16Bit(uint16_T* const out_pu16PeriodCnts, uint16_T* const out_pu16DutyCycleCnts);extern void SPD2_FrequencyInput_TriggerOnPulseCnt_Set(uint8_T uDesiredPulseCnt);
extern uint32_T SPD2_FrequencyInput_AverageFrequency_Get(void);
extern uint32_T SPD2_FrequencyInput_InstantFrequency_Get(void);
extern void SPD2_FrequencyInput_InstantFrequencyWithDutyCycle_Get(uint32_T* const out_pu32Frequency, int16_T* const out_ps16Duty);
extern void SPD2_FrequencyInput_Period_Raw_Get32Bit(uint32_T* const out_pu32PeriodCnts, uint32_T* const out_pu32DutyCycleCnts);
extern void SPD2_FrequencyInput_Period_Raw_Get16Bit(uint16_T* const out_pu16PeriodCnts, uint16_T* const out_pu16DutyCycleCnts);extern void SPD3_FrequencyInput_TriggerOnPulseCnt_Set(uint8_T uDesiredPulseCnt);
extern uint32_T SPD3_FrequencyInput_AverageFrequency_Get(void);
extern uint32_T SPD3_FrequencyInput_InstantFrequency_Get(void);
extern void SPD3_FrequencyInput_InstantFrequencyWithDutyCycle_Get(uint32_T* const out_pu32Frequency, int16_T* const out_ps16Duty);
extern void SPD3_FrequencyInput_Period_Raw_Get32Bit(uint32_T* const out_pu32PeriodCnts, uint32_T* const out_pu32DutyCycleCnts);
extern void SPD3_FrequencyInput_Period_Raw_Get16Bit(uint16_T* const out_pu16PeriodCnts, uint16_T* const out_pu16DutyCycleCnts);extern void LSO9_PWMOutput_PWMOutput_Create(void);
extern boolean_T LSO9_PWMOutput_PWMOutput_Set(uint32_T frequency, int16_T dutyCycle, boolean_T brake, boolean_T enable);extern void LSO10_PWMOutput_PWMOutput_Create(void);
extern boolean_T LSO10_PWMOutput_PWMOutput_Set(uint32_T frequency, int16_T dutyCycle, boolean_T brake, boolean_T enable);extern void H1p_PWMOutput_Create(void);
extern boolean_T H1p_PWMOutput_Set(uint32_T frequency, int16_T dutyCycle, boolean_T brake, boolean_T enable);extern void H1m_PWMOutput_Create(void);
extern boolean_T H1m_PWMOutput_Set(uint32_T frequency, int16_T dutyCycle, boolean_T brake, boolean_T enable);extern void H1_InhibitA_PWMOutput_Create(void);
extern boolean_T H1_InhibitA_PWMOutput_Set(uint32_T frequency, int16_T dutyCycle, boolean_T brake, boolean_T enable);extern void H1_InhibitB_PWMOutput_Create(void);
extern boolean_T H1_InhibitB_PWMOutput_Set(uint32_T frequency, int16_T dutyCycle, boolean_T brake, boolean_T enable);extern void H1p_H1m_PWMOutput_PWMOutput_Set(uint32_T frequency, int16_T dutyCycle, boolean_T brake, boolean_T enable);extern int16_T H1p_H1m_PWMOutput_CM_CurrentMeasurement_mA_Get(void);extern void H2p_PWMOutput_Create(void);
extern boolean_T H2p_PWMOutput_Set(uint32_T frequency, int16_T dutyCycle, boolean_T brake, boolean_T enable);extern boolean_T H2p_PWMOutput_PWMOutput_Set(uint32_T frequency, int16_T dutyCycle, boolean_T brake, boolean_T enable);extern void H2m_PWMOutput_Create(void);
extern boolean_T H2m_PWMOutput_Set(uint32_T frequency, int16_T dutyCycle, boolean_T brake, boolean_T enable);extern boolean_T H2m_PWMOutput_PWMOutput_Set(uint32_T frequency, int16_T dutyCycle, boolean_T brake, boolean_T enable);extern void LSO8_PWMOutput_PWMOutput_Create(void);
extern boolean_T LSO8_PWMOutput_PWMOutput_Set(uint32_T frequency, int16_T dutyCycle, boolean_T brake, boolean_T enable);extern uint16_T QADC_EST1_AnalogInput_Get(void);
extern uint16_T QADC_EST2_AnalogInput_Get(void);
extern uint16_T QADC_EST3_AnalogInput_Get(void);
extern uint16_T QADC_EST4_AnalogInput_Get(void);
extern uint16_T QADC_EST5_AnalogInput_Get(void);
extern uint16_T QADC_EST6_AnalogInput_Get(void);
extern uint16_T QADC_EST7_AnalogInput_Get(void);
extern uint16_T QADC_EST8_AnalogInput_Get(void);extern void EST1_PSPOutput_Condition_Set(uint8_T pulse, uint8_T state);
extern void EST1_PSPOutput_HardStart_HardStop_Set(uint8_T pulse, uint8_T state, int16_T startAngle, int16_T stopAngle, uint32_T maxDuration);
extern int16_T EST1_PSPOutput_MinDisplacementForPulseScheduling_Get(void);extern void EST1_Diagnostic_Trigger(void);
extern uint16_T EST1_Diagnostic_Data_ADCValue_Get(void);extern void EST2_PSPOutput_Condition_Set(uint8_T pulse, uint8_T state);
extern void EST2_PSPOutput_HardStart_HardStop_Set(uint8_T pulse, uint8_T state, int16_T startAngle, int16_T stopAngle, uint32_T maxDuration);
extern int16_T EST2_PSPOutput_MinDisplacementForPulseScheduling_Get(void);extern void EST2_Diagnostic_Trigger(void);
extern uint16_T EST2_Diagnostic_Data_ADCValue_Get(void);extern void EST3_PSPOutput_Condition_Set(uint8_T pulse, uint8_T state);
extern void EST3_PSPOutput_HardStart_HardStop_Set(uint8_T pulse, uint8_T state, int16_T startAngle, int16_T stopAngle, uint32_T maxDuration);
extern int16_T EST3_PSPOutput_MinDisplacementForPulseScheduling_Get(void);extern void EST3_Diagnostic_Trigger(void);
extern uint16_T EST3_Diagnostic_Data_ADCValue_Get(void);extern void EST4_PSPOutput_Condition_Set(uint8_T pulse, uint8_T state);
extern void EST4_PSPOutput_HardStart_HardStop_Set(uint8_T pulse, uint8_T state, int16_T startAngle, int16_T stopAngle, uint32_T maxDuration);
extern int16_T EST4_PSPOutput_MinDisplacementForPulseScheduling_Get(void);extern void EST4_Diagnostic_Trigger(void);
extern uint16_T EST4_Diagnostic_Data_ADCValue_Get(void);extern void EST5_PSPOutput_Condition_Set(uint8_T pulse, uint8_T state);
extern void EST5_PSPOutput_HardStart_HardStop_Set(uint8_T pulse, uint8_T state, int16_T startAngle, int16_T stopAngle, uint32_T maxDuration);
extern int16_T EST5_PSPOutput_MinDisplacementForPulseScheduling_Get(void);extern void EST5_Diagnostic_Trigger(void);
extern uint16_T EST5_Diagnostic_Data_ADCValue_Get(void);extern void EST6_PSPOutput_Condition_Set(uint8_T pulse, uint8_T state);
extern void EST6_PSPOutput_HardStart_HardStop_Set(uint8_T pulse, uint8_T state, int16_T startAngle, int16_T stopAngle, uint32_T maxDuration);
extern int16_T EST6_PSPOutput_MinDisplacementForPulseScheduling_Get(void);extern void EST6_Diagnostic_Trigger(void);
extern uint16_T EST6_Diagnostic_Data_ADCValue_Get(void);extern void EST7_PSPOutput_Condition_Set(uint8_T pulse, uint8_T state);
extern void EST7_PSPOutput_HardStart_HardStop_Set(uint8_T pulse, uint8_T state, int16_T startAngle, int16_T stopAngle, uint32_T maxDuration);
extern int16_T EST7_PSPOutput_MinDisplacementForPulseScheduling_Get(void);extern void EST7_Diagnostic_Trigger(void);
extern uint16_T EST7_Diagnostic_Data_ADCValue_Get(void);extern void EST8_PSPOutput_Condition_Set(uint8_T pulse, uint8_T state);
extern void EST8_PSPOutput_HardStart_HardStop_Set(uint8_T pulse, uint8_T state, int16_T startAngle, int16_T stopAngle, uint32_T maxDuration);
extern int16_T EST8_PSPOutput_MinDisplacementForPulseScheduling_Get(void);extern void EST8_Diagnostic_Trigger(void);
extern uint16_T EST8_Diagnostic_Data_ADCValue_Get(void);extern void INJ1_PSPOutput_Condition_Set(uint8_T pulse, uint8_T state);
extern void INJ1_PSPOutput_TransientBehavior_Set(NativeVar_U statePrimary, int16_T startAnglePrimary, uint32_T durationPrimary, NativeVar_U stateTransient, int16_T stopAngleTransient, uint32_T durationTransient);
extern int16_T INJ1_PSPOutput_MinDisplacementForPulseScheduling_Get(void);extern void INJ2_PSPOutput_Condition_Set(uint8_T pulse, uint8_T state);
extern void INJ2_PSPOutput_TransientBehavior_Set(NativeVar_U statePrimary, int16_T startAnglePrimary, uint32_T durationPrimary, NativeVar_U stateTransient, int16_T stopAngleTransient, uint32_T durationTransient);
extern int16_T INJ2_PSPOutput_MinDisplacementForPulseScheduling_Get(void);extern void INJ3_PSPOutput_Condition_Set(uint8_T pulse, uint8_T state);
extern void INJ3_PSPOutput_TransientBehavior_Set(NativeVar_U statePrimary, int16_T startAnglePrimary, uint32_T durationPrimary, NativeVar_U stateTransient, int16_T stopAngleTransient, uint32_T durationTransient);
extern int16_T INJ3_PSPOutput_MinDisplacementForPulseScheduling_Get(void);extern void INJ4_PSPOutput_Condition_Set(uint8_T pulse, uint8_T state);
extern void INJ4_PSPOutput_TransientBehavior_Set(NativeVar_U statePrimary, int16_T startAnglePrimary, uint32_T durationPrimary, NativeVar_U stateTransient, int16_T stopAngleTransient, uint32_T durationTransient);
extern int16_T INJ4_PSPOutput_MinDisplacementForPulseScheduling_Get(void);extern void INJ5_PSPOutput_Condition_Set(uint8_T pulse, uint8_T state);
extern void INJ5_PSPOutput_TransientBehavior_Set(NativeVar_U statePrimary, int16_T startAnglePrimary, uint32_T durationPrimary, NativeVar_U stateTransient, int16_T stopAngleTransient, uint32_T durationTransient);
extern int16_T INJ5_PSPOutput_MinDisplacementForPulseScheduling_Get(void);extern void INJ6_PSPOutput_Condition_Set(uint8_T pulse, uint8_T state);
extern void INJ6_PSPOutput_TransientBehavior_Set(NativeVar_U statePrimary, int16_T startAnglePrimary, uint32_T durationPrimary, NativeVar_U stateTransient, int16_T stopAngleTransient, uint32_T durationTransient);
extern int16_T INJ6_PSPOutput_MinDisplacementForPulseScheduling_Get(void);extern void INJ7_PSPOutput_Condition_Set(uint8_T pulse, uint8_T state);
extern void INJ7_PSPOutput_TransientBehavior_Set(NativeVar_U statePrimary, int16_T startAnglePrimary, uint32_T durationPrimary, NativeVar_U stateTransient, int16_T stopAngleTransient, uint32_T durationTransient);
extern int16_T INJ7_PSPOutput_MinDisplacementForPulseScheduling_Get(void);extern void INJ8_PSPOutput_Condition_Set(uint8_T pulse, uint8_T state);
extern void INJ8_PSPOutput_TransientBehavior_Set(NativeVar_U statePrimary, int16_T startAnglePrimary, uint32_T durationPrimary, NativeVar_U stateTransient, int16_T stopAngleTransient, uint32_T durationTransient);
extern int16_T INJ8_PSPOutput_MinDisplacementForPulseScheduling_Get(void);extern NativeError_S DOut11001p0004_DiscreteOutput_Get(boolean_T* const out_pValue);
extern void DOut11001p0004_DiscreteOutput_Set(boolean_T value);
extern NativeError_S DOut11529p0004_DiscreteOutput_Get(boolean_T* const out_pValue);
extern void DOut11529p0004_DiscreteOutput_Set(boolean_T value);
extern NativeError_S H2_InhibitA_DiscreteOutput_Get(boolean_T* const out_pValue);
extern void H2_InhibitA_DiscreteOutput_Set(boolean_T value);
extern NativeError_S H2_InhibitB_DiscreteOutput_Get(boolean_T* const out_pValue);
extern void H2_InhibitB_DiscreteOutput_Set(boolean_T value);
extern NativeError_S CNKPullup_DiscreteOutput_Get(boolean_T* const out_pValue);
extern NativeError_S ODRC_DiscreteOutput_Get(boolean_T* const out_pValue);
extern NativeError_S SPD1Pullup_DiscreteOutput_Get(boolean_T* const out_pValue);
extern NativeError_S CAMPullup_DiscreteOutput_Get(boolean_T* const out_pValue);/* Create all I/O resources */
extern void IO_Create(void);/* Stop all I/O by putting each resource into a safe state */
extern void IO_Stop(void);

#endif

